package com.gulfstreambio.kc.web.support;

import javax.servlet.ServletRequest;

import com.ardais.bigr.util.UniqueIdGenerator;

/**
 * Provides access to all context information needed by the KnowledgeCapture UI support components
 * to render its user interface fragments appropriately.  A host application will typically set
 * appropriate context information before calling KnowledgeCapture support components, and 
 * KnowledgeCapture will use this information and set additional context while rendering user
 * interface fragments.
 */
public class KcUiContext {

  public static final String KC_UI_CONTEXT = "com.gulfstreambio.kcUiContext";
  
  private String _adePopupUrl;
  private String _pageLinkBaseUrl;
  private String _detViewerResultsUrl;
  private UniqueIdGenerator _idgen;
  private boolean _useAjax;

  /**
   * Returns the KnowledgeCapture UI context for the specified request, creating it if necessary.
   * 
   * @param request  the <code>ServletRequest</code>
   * @return  The KnowledgeCapture UI context for the specified request.
   */
  public static KcUiContext getKcUiContext(ServletRequest request) {
    KcUiContext context = (KcUiContext) request.getAttribute(KcUiContext.KC_UI_CONTEXT);
    if (context == null) {
      context = new KcUiContext();
      request.setAttribute(KcUiContext.KC_UI_CONTEXT, context);
    }
    return context;
  }
  
  /**
   * Returns the URL to be used for the ADE popup.
   * 
   * @return The ADE popup URL.
   * @see #setAdePopupUrl(String)
   */
  public String getAdePopupUrl() {
    return _adePopupUrl;
  }

  /**
   * Sets the URL to be used for the ADE popup, which is a popup window used to capture ADE element
   * values for both data and query forms.  This is the URL that is navigated to when an ADE popup 
   * link is clicked in a data annotation form or when the ADE Criteria button is clicked in a 
   * query form.  A host application must set this if data elements with ADEs are used in either of 
   * these situations.
   * 
   * @param url the URL
   */
  public void setAdePopupUrl(String url) {
    _adePopupUrl = url;
  }
  
  /**
   * Returns the URL to be used for links to pages.
   * 
   * @return The ADE popup URL.
   * @see #setPageLinkBaseUrl(String)
   */
  public String getPageLinkBaseUrl() {
    return _pageLinkBaseUrl;
  }

  /**
   * Sets the base URL to be used for links to pages, which are those categories of a form that 
   * represent pages.  This is the base URL that is navigated to when one of the links (whose
   * default rendering is a tab) is clicked in the HTML generated by the UI support components.
   * A host application must set this if it is rendering a data or query form with categories that 
   * represent pages.
   * <p>  
   * For a data form this URL will have extra request parameters specified as follows, if these
   * values are set in this <code>KcUiContext</code> or in the {@link FormContext} on the top of 
   * the {@link FormContextStack} (which is what ultimately happens when these paramters are set
   * in this <code>KcUiContext</code>).
   * <ul>
   * <li>The form definition id is added as request parameter 
   * {@link RequestParameterConstants.FORM_DEFINITION_ID}.</li>
   * <li>The form instance id is added as request parameter 
   * {@link RequestParameterConstants.FORM_INSTANCE_ID}.</li>
   * <li>The domain object id is added as request parameter 
   * {@link RequestParameterConstants.DOMAIN_OBJECT_ID}.</li>
   * <li>The domain object type is added as request parameter 
   * {@link RequestParameterConstants.DOMAIN_OBJECT_TYPE}.</li>
   * </ul>
   * <p>  
   * For both data and query forms this URL will have the following extra request parameter 
   * added to indicate the category that the link represents.
   * <ul>
   * <li>The display name of the category for which the link is generated is added as request 
   * parameter {@link RequestParameterConstants.SELECTED_PAGE}.</li>
   * </ul>
   * 
   * @param url the URL
   */
  public void setPageLinkBaseUrl(String url) {
    _pageLinkBaseUrl = url;
  }

  /**
   * Returns the URL to be used for the DET Viewer results.
   * 
   * @return The DET Viewer results URL.
   * @see #setDetViewerResultsUrl(String)
   */
  public String getDetViewerResultsUrl() {
    return _detViewerResultsUrl;
  }

  /**
   * Sets the URL to be used to render the DET Viewer results page.  This is the URL that is 
   * navigated to when the user searches for DET concepts using the DET Viewer page.  This URL will
   * generally just forward to the DET Viewer results.jsp provided by KnowledgeCapture when this
   * URL is navigated to.  A host application must set this before forwarding to the main 
   * detViewer.jsp, so it knows where to navigate to when the user performs a search.
   * 
   * @param url the URL
   */
  public void setDetViewerResultsUrl(String url) {
    _detViewerResultsUrl = url;
  }

  /**
   * Returns whether AJAX should be used to fetch pages across multiple tabs in a form, if the
   * forms has multiple tabs.
   * 
   * @return <code>true</code> if AJAX should be used; <code>false</code> otherwise.
   * @see #setUseAjax(boolean)
   */
  public boolean isUseAjax() {
    return _useAjax;
  }

  /**
   * Sets whether AJAX should be used to fetch pages across multiple tabs in a form, if the
   * forms has multiple tabs.  Setting this will direct the KnowledgeCapture UI components
   * whether to generated the pages all tabs (if set to <code>false</code>) or just the selected 
   * tab (if set to <code>true</code>).  If this is set to <code>true</code>, then the page link
   * base URL must be set by calling {@link #setPageLinkBaseUrl(String)}.   
   * 
   * @param useAjax <code>true</code> if AJAX should be used; <code>false</code> otherwise
   */
  public void setUseAjax(boolean useAjax) {
    _useAjax = useAjax;
  }
  
  
  /**
   * Returns the unique id generator associated with this <code>KcUiContext</code>, creating it 
   * the first time this method is called.  
   * 
   * @param request the servlet request
   * @return The <code>UniqueIdGenerator</code>
   */
  public UniqueIdGenerator getUniqueIdGenerator() {
    if (_idgen == null) {
      _idgen = new UniqueIdGenerator();
    }
    return _idgen;
  }

  private KcUiContext() {
    super();
  }

}
