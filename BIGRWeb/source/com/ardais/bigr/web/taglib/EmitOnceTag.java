package com.ardais.bigr.web.taglib;

import java.io.IOException;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;
import javax.servlet.jsp.PageContext;
import javax.servlet.jsp.tagext.BodyContent;
import javax.servlet.jsp.tagext.BodyTagSupport;

import com.ardais.bigr.api.ApiLogger;

/**
 * Tag handler for the <code>emitOnce</code> tag.  This tag
 * writes the body if an emitOnce tag with the same contentId property hasn't already
 * written its content in the same response page.
 * More specifically, we set a marker in REQUEST_SCOPE the first time
 * and don't write out anything if that marker is already there.
 */
public class EmitOnceTag extends BodyTagSupport {

  private String _contentId = null;

	private boolean rendered = true;

  /**
   * Creates a new <code>EmitOnceTag</code>.
   */
  public EmitOnceTag() {
    super();
  }

  /**
   * Release all allocated resources.
   */
  public void release() {
    super.release();
    _contentId = null;
  }

  /**
   * Sets id associated with the content.  This tag
   * writes the body if an emitOnce tag with the same contentId property hasn't already
   * written its content in the same page.  This contentId does not have any relation to
   * the ids of HTML elements that may be generated by the body content, it is just
   * used by the tag itself to determine whether or not the content needs to be written.
   * 
   * @param contentId The content id.
   */
  public void setContentId(String contentId) {
    _contentId = contentId;
  }

  /**
   */
  public int doStartTag() throws JspException {
    String testAttrName = "emitOnceWrote" + _contentId;
    if (pageContext.getAttribute(testAttrName, PageContext.REQUEST_SCOPE) == null
		&& rendered)
	{
      pageContext.setAttribute(testAttrName, "true", PageContext.REQUEST_SCOPE);
      return EVAL_BODY_BUFFERED;
    }
    else
	{
      return SKIP_BODY;
    }
  }

  /**
   */
  public int doAfterBody() throws JspException {
    BodyContent body = getBodyContent();
    if (body != null) {
      JspWriter out = body.getEnclosingWriter();
      try {
        out.write(body.getString());
      }
      catch (IOException e) {
        String msg = "Exception in JSP tag implementation.";
        ApiLogger.log(msg, e);
        throw new JspException(msg);
      }
    }
    return SKIP_BODY;
  }

	public boolean getRendered()
	{
		return rendered;
	}

	public void setRendered(boolean rendered)
	{
		this.rendered = rendered;
	}
}
