package com.ardais.bigr.iltds.helpers;

import java.sql.PreparedStatement;

import com.ardais.bigr.api.ApiFunctions;

/**
 * Filters which {@link com.ardais.bigr.javabeans.SampleData SampleData} objects should be 
 * returned from a sample query that uses
 * {@link com.ardais.bigr.iltds.bizlogic.SampleFinder SampleFinder}.
 * <p>
 * Callers should call appropriate setters to set the desired filters, then call
 * {@link #getSqlWhereClauses(String) getSqlWhereClauses} to get the SQL WHERE clause fragment
 * that corresponds to the filters, and then call
 * {@link #bindSqlWhereClauses(java.sql.PreparedStatement, int) bindSqlWhereClauses} to bind
 * actual values to the parameters.  This class does not assume that it is responsible for the
 * entire SQL WHERE clause, and thus <code>getSqlWhereClauses</code> and
 * <code>bindSqlWhereClauses</code> were written to allow callers to easily incorporate them
 * into the construction of the entire WHERE clause.
 * 
 * @see SampleSelect
 */
public class SampleFilter {

  private String _sampleId = null;

  /**
   * Creates a new SampleFilter with no filters specified.
   * 
   */
  public SampleFilter() {
    super();
  }

  /**
   * Creates a new SampleFilter that matches the specified sample id.
   */
  public SampleFilter(String sampleId) {
    this();
    setSampleId(sampleId);
  }

  /**
   * Returns the sample barcode id of the sample to query for.  This must have been previously
   * set via a call to {@link #setSampleId(String)}, or the constructor that takes a barcode id
   * parameter.
   * 
   * @return  The sample barcode id
   */
  public String getSampleId() {
    return _sampleId;
  }

  /**
   * Sets the sample barcode id of the sample to query for.  The results will include at most
   * one sample that has the specified barcode id, but may return no results if other filters
   * filter out the sample with this barcode id.  By default this is null, indicating that
   * barcode id should not be used as a filter.
   * 
   * @param  id  the sample barcode id 
   */
  public void setSampleId(String id) {
    _sampleId = id;
  }

  /**
   * Returns the SQL WHERE clause fragment for the filters specified in this SampleFilter.
   * If multiple filters were specified, then they are ANDed together in the returned fragment.
   * This method does not include the SQL WHERE keyword in the returned fragment, and it prepends
   * and appends a space to the returned fragment to allow the caller to easily compose the entire
   * WHERE clause by simply appending the returned string.  If no filters were specified, then 
   * an empty string is returned.    
   * 
   * @param  sampleTableAlias  the alias for the ILTDS_SAMPLE table in the query 
   * @return  The SQL where clause.
   */
  public String getSqlWhereClauses(String sampleTableAlias) {
    StringBuffer sql = new StringBuffer(256);

    // Add a space to the beginning to separate these conditions from whatever they
    // might end up getting appended to by the caller.
    sql.append(' ');

    boolean addedACondition = false;

    if (!ApiFunctions.isEmpty(getSampleId())) {
      if (addedACondition) {
        sql.append("\n  and ");
      }
      sql.append(sampleTableAlias);
      sql.append(".sample_barcode_id = ?");
      addedACondition = true;
    }

    // Add a space to the end to separate these conditions from whatever they
    // might end up getting appended to by the caller.
    sql.append(' ');

    if (addedACondition) {
      return sql.toString();
    }
    else {
      return ApiFunctions.EMPTY_STRING;
    }
  }

  /**
   * Binds actual values to the parameters of the SQL WHERE clause fragment generated by
   * {@link #getSqlWhereClauses(String) getSqlWhereClauses}.  The actual values are those that
   * were set when the filters were specified.  Since this class does not assume it is responsible
   * for the entire SQL WHERE clause, the starting bind index must be specified, and the next
   * bind index is returned.
   * 
   * @param  pstmt  the PreparedStatement
   * @param  startingBindIndex  the starting bind index  
   * @return  The next bind index.
   */
  public int bindSqlWhereClauses(PreparedStatement pstmt, int startingBindIndex) {
    // DEVELOPERS NOTE: For bindSqlWhereClauses to work correctly, it needs to bind criteria in 
    // the same order and use the same number of bind variables as are included in the where clause 
    // fragment generated by getSqlWhereClauses.

    int bindIndex = startingBindIndex;

    try {
      if (!ApiFunctions.isEmpty(getSampleId())) {
        pstmt.setString(bindIndex++, getSampleId());
      }
    }
    catch (Exception e) {
      ApiFunctions.throwAsRuntimeException(e);
    }

    return bindIndex;
  }
}
