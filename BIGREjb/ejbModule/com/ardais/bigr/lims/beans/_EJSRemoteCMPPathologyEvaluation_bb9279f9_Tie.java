// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.ardais.bigr.lims.beans;

import java.io.Serializable;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.sql.Timestamp;
import java.util.Hashtable;
import java.util.List;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteCMPPathologyEvaluation_bb9279f9_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteCMPPathologyEvaluation_bb9279f9 target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.ardais.bigr.lims.beans.PathologyEvaluation:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.ivj.ejb.runtime.CopyHelper:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteCMPPathologyEvaluation_bb9279f9) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.hashCode()) {
                case -2099418672: 
                    if (method.equals("_get_reportedYN")) {
                        return _get_reportedYN(in, reply);
                    }
                case -2076203351: 
                    if (method.equals("J_copyFromEJB")) {
                        return J_copyFromEJB(in, reply);
                    }
                case -2061050420: 
                    if (method.equals("_get_hypoacellularstromaCells")) {
                        return _get_hypoacellularstromaCells(in, reply);
                    }
                case -2050971379: 
                    if (method.equals("_get_sampleId")) {
                        return _get_sampleId(in, reply);
                    }
                case -1817185941: 
                    if (method.equals("_get_tissueOfFindingOther")) {
                        return _get_tissueOfFindingOther(in, reply);
                    }
                case -1753183568: 
                    if (method.equals("_set_tumorFeatures")) {
                        return _set_tumorFeatures(in, reply);
                    }
                case -1702901326: 
                    if (method.equals("_set_tissueOfOriginOther")) {
                        return _set_tissueOfOriginOther(in, reply);
                    }
                case -1550521068: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case -1533298186: 
                    if (method.equals("_get_concatenatedExternalComments")) {
                        return _get_concatenatedExternalComments(in, reply);
                    }
                case -1471083800: 
                    if (method.equals("_get_concatenatedInternalComments")) {
                        return _get_concatenatedInternalComments(in, reply);
                    }
                case -1409336696: 
                    if (method.equals("_get_pathologist")) {
                        return _get_pathologist(in, reply);
                    }
                case -1322952836: 
                    if (method.equals("_set_structures")) {
                        return _set_structures(in, reply);
                    }
                case -1011244123: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    }
                case -934610812: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case -822921664: 
                    if (method.equals("_set_hypoacellularstromaCells")) {
                        return _set_hypoacellularstromaCells(in, reply);
                    }
                case -813030748: 
                    if (method.equals("_get_tumorFeatures")) {
                        return _get_tumorFeatures(in, reply);
                    }
                case -738761155: 
                    if (method.equals("_set_reportedDate")) {
                        return _set_reportedDate(in, reply);
                    }
                case -724215496: 
                    if (method.equals("_set_inflammations")) {
                        return _set_inflammations(in, reply);
                    }
                case -703405822: 
                    if (method.equals("_get_normalCells")) {
                        return _get_normalCells(in, reply);
                    }
                case -641221191: 
                    if (method.equals("_set_cellularstromaCells")) {
                        return _set_cellularstromaCells(in, reply);
                    }
                case -566972951: 
                    if (method.equals("_set_lesions")) {
                        return _set_lesions(in, reply);
                    }
                case -550053926: 
                    if (method.equals("_get_sourceEvaluationId")) {
                        return _get_sourceEvaluationId(in, reply);
                    }
                case -536784463: 
                    if (method.equals("_set_tissueOfFinding")) {
                        return _set_tissueOfFinding(in, reply);
                    }
                case -501978751: 
                    if (method.equals("_set_sampleId")) {
                        return _set_sampleId(in, reply);
                    }
                case -498584172: 
                    if (method.equals("_set_pathologist")) {
                        return _set_pathologist(in, reply);
                    }
                case -491098087: 
                    if (method.equals("_set_createMethod")) {
                        return _set_createMethod(in, reply);
                    }
                case -478393123: 
                    if (method.equals("_get_lesions")) {
                        return _get_lesions(in, reply);
                    }
                case -435912124: 
                    if (method.equals("_set_externalFeatures")) {
                        return _set_externalFeatures(in, reply);
                    }
                case -381310058: 
                    if (method.equals("_get_migratedYN")) {
                        return _get_migratedYN(in, reply);
                    }
                case -373697738: 
                    if (method.equals("_set_internalFeatures")) {
                        return _set_internalFeatures(in, reply);
                    }
                case -361856242: 
                    if (method.equals("_set_hypoacellularStromaFeatures")) {
                        return _set_hypoacellularStromaFeatures(in, reply);
                    }
                case -276488190: 
                    if (method.equals("_get_hypoacellularStromaFeatures")) {
                        return _get_hypoacellularStromaFeatures(in, reply);
                    }
                case -139330330: 
                    if (method.equals("_set_createDate")) {
                        return _set_createDate(in, reply);
                    }
                case -30688613: 
                    if (method.equals("_get_lesionCells")) {
                        return _get_lesionCells(in, reply);
                    }
                case 111102113: 
                    if (method.equals("_set_necrosisCells")) {
                        return _set_necrosisCells(in, reply);
                    }
                case 115259498: 
                    if (method.equals("_set_concatenatedExternalComments")) {
                        return _set_concatenatedExternalComments(in, reply);
                    }
                case 175011280: 
                    if (method.equals("_get_externalFeatures")) {
                        return _get_externalFeatures(in, reply);
                    }
                case 176000952: 
                    if (method.equals("J_copyToEJB")) {
                        return J_copyToEJB(in, reply);
                    }
                case 177473884: 
                    if (method.equals("_set_concatenatedInternalComments")) {
                        return _set_concatenatedInternalComments(in, reply);
                    }
                case 197577150: 
                    if (method.equals("_set_tumorCells")) {
                        return _set_tumorCells(in, reply);
                    }
                case 207346702: 
                    if (method.equals("_set_normalCells")) {
                        return _set_normalCells(in, reply);
                    }
                case 215937324: 
                    if (method.equals("_get_inflammations")) {
                        return _get_inflammations(in, reply);
                    }
                case 237225666: 
                    if (method.equals("_get_internalFeatures")) {
                        return _get_internalFeatures(in, reply);
                    }
                case 298246471: 
                    if (method.equals("_get_diagnosisOther")) {
                        return _get_diagnosisOther(in, reply);
                    }
                case 423812420: 
                    if (method.equals("_set_reportedYN")) {
                        return _set_reportedYN(in, reply);
                    }
                case 448783368: 
                    if (method.equals("_get_structures")) {
                        return _get_structures(in, reply);
                    }
                case 539794086: 
                    if (method.equals("_get_tissueOfOriginOther")) {
                        return _get_tissueOfOriginOther(in, reply);
                    }
                case 575404682: 
                    if (method.equals("_get_tissueOfOrigin")) {
                        return _get_tissueOfOrigin(in, reply);
                    }
                case 645904257: 
                    if (method.equals("_get_cellularStromaFeatures")) {
                        return _get_cellularStromaFeatures(in, reply);
                    }
                case 763074382: 
                    if (method.equals("_set_sourceEvaluationId")) {
                        return _set_sourceEvaluationId(in, reply);
                    }
                case 880063911: 
                    if (method.equals("_set_lesionCells")) {
                        return _set_lesionCells(in, reply);
                    }
                case 928404297: 
                    if (method.equals("_get_diagnosis")) {
                        return _get_diagnosis(in, reply);
                    }
                case 988065515: 
                    if (method.equals("_get_microscopicAppearance")) {
                        return _get_microscopicAppearance(in, reply);
                    }
                case 1006943397: 
                    if (method.equals("_get_tissueOfFinding")) {
                        return _get_tissueOfFinding(in, reply);
                    }
                case 1018141941: 
                    if (method.equals("_set_cellularStromaFeatures")) {
                        return _set_cellularStromaFeatures(in, reply);
                    }
                case 1051254933: 
                    if (method.equals("_get_necrosisCells")) {
                        return _get_necrosisCells(in, reply);
                    }
                case 1092681673: 
                    if (method.equals("_get_reportedDate")) {
                        return _get_reportedDate(in, reply);
                    }
                case 1218280123: 
                    if (method.equals("_set_diagnosisOther")) {
                        return _set_diagnosisOther(in, reply);
                    }
                case 1264756395: 
                    if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    }
                case 1340344741: 
                    if (method.equals("_get_createMethod")) {
                        return _get_createMethod(in, reply);
                    }
                case 1495438334: 
                    if (method.equals("_set_tissueOfOrigin")) {
                        return _set_tissueOfOrigin(in, reply);
                    }
                case 1541594640: 
                    if (method.equals("_set_slideId")) {
                        return _set_slideId(in, reply);
                    }
                case 1601474221: 
                    if (method.equals("_get_cellularstromaCells")) {
                        return _get_cellularstromaCells(in, reply);
                    }
                case 1630174468: 
                    if (method.equals("_get_slideId")) {
                        return _get_slideId(in, reply);
                    }
                case 1632405874: 
                    if (method.equals("_get_createDate")) {
                        return _get_createDate(in, reply);
                    }
                case 1673700319: 
                    if (method.equals("_set_tissueOfFindingOther")) {
                        return _set_tissueOfFindingOther(in, reply);
                    }
                case 1702535509: 
                    if (method.equals("_set_diagnosis")) {
                        return _set_diagnosis(in, reply);
                    }
                case 1831357175: 
                    if (method.equals("_set_microscopicAppearance")) {
                        return _set_microscopicAppearance(in, reply);
                    }
                case 1944413392: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    }
                case 1969313354: 
                    if (method.equals("_get_tumorCells")) {
                        return _get_tumorCells(in, reply);
                    }
                case 2141921034: 
                    if (method.equals("_set_migratedYN")) {
                        return _set_migratedYN(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream J_copyFromEJB(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Hashtable result = target._copyFromEJB();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Hashtable.class);
        return out;
    }
    
    private OutputStream J_copyToEJB(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Hashtable arg0 = (Hashtable) in.read_value(Hashtable.class);
        target._copyToEJB(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_slideId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getSlideId();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_slideId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setSlideId(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_sampleId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getSampleId();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_sampleId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setSampleId(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_microscopicAppearance(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getMicroscopicAppearance();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_microscopicAppearance(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setMicroscopicAppearance(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_reportedYN(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getReportedYN();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_reportedYN(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setReportedYN(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_createMethod(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getCreateMethod();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_createMethod(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setCreateMethod(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_tumorCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getTumorCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_tumorCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setTumorCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_normalCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getNormalCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_normalCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setNormalCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_hypoacellularstromaCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getHypoacellularstromaCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_hypoacellularstromaCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setHypoacellularstromaCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_necrosisCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getNecrosisCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_necrosisCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setNecrosisCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_lesionCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getLesionCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_lesionCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setLesionCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_diagnosis(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getDiagnosis();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_diagnosis(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setDiagnosis(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_tissueOfOrigin(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getTissueOfOrigin();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_tissueOfOrigin(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setTissueOfOrigin(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_createDate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Timestamp result = target.getCreateDate();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Timestamp.class);
        return out;
    }
    
    private OutputStream _set_createDate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Timestamp arg0 = (Timestamp) in.read_value(Timestamp.class);
        target.setCreateDate(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_pathologist(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getPathologist();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_pathologist(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setPathologist(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_migratedYN(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getMigratedYN();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_migratedYN(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setMigratedYN(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_tissueOfFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getTissueOfFinding();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_tissueOfFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setTissueOfFinding(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_tissueOfFindingOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getTissueOfFindingOther();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_tissueOfFindingOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setTissueOfFindingOther(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_diagnosisOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getDiagnosisOther();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_diagnosisOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setDiagnosisOther(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_tissueOfOriginOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getTissueOfOriginOther();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_tissueOfOriginOther(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setTissueOfOriginOther(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_concatenatedExternalComments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getConcatenatedExternalComments();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_concatenatedExternalComments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setConcatenatedExternalComments(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_concatenatedInternalComments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getConcatenatedInternalComments();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_concatenatedInternalComments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setConcatenatedInternalComments(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_sourceEvaluationId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String result = target.getSourceEvaluationId();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream _set_sourceEvaluationId(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        target.setSourceEvaluationId(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_cellularstromaCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer result = target.getCellularstromaCells();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Integer.class);
        return out;
    }
    
    private OutputStream _set_cellularstromaCells(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Integer arg0 = (Integer) in.read_value(Integer.class);
        target.setCellularstromaCells(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_lesions(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getLesions();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _set_lesions(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setLesions(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_cellularStromaFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getCellularStromaFeatures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_externalFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getExternalFeatures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_hypoacellularStromaFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getHypoacellularStromaFeatures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_inflammations(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getInflammations();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_internalFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getInternalFeatures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_structures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getStructures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _get_tumorFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List result = target.getTumorFeatures();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream _set_cellularStromaFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setCellularStromaFeatures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_externalFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setExternalFeatures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_hypoacellularStromaFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setHypoacellularStromaFeatures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_inflammations(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setInflammations(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_internalFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setInternalFeatures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_structures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setStructures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _set_tumorFeatures(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        List arg0 = (List) in.read_value(List.class);
        target.setTumorFeatures(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_reportedDate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Timestamp result = target.getReportedDate();
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,Timestamp.class);
        return out;
    }
    
    private OutputStream _set_reportedDate(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Timestamp arg0 = (Timestamp) in.read_value(Timestamp.class);
        target.setReportedDate(arg0);
        OutputStream out = reply.createReply();
        return out;
    }
}
