// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.ardais.bigr.pdc.beans;

import com.ardais.bigr.iltds.assistants.LegalValueSet;
import com.ardais.bigr.pdc.javabeans.PathReportData;
import com.ardais.bigr.pdc.javabeans.PathReportDiagnosticData;
import com.ardais.bigr.pdc.javabeans.PathReportSectionData;
import com.ardais.bigr.pdc.javabeans.PathReportSectionFindingData;
import com.ardais.bigr.security.SecurityInfo;
import java.io.Serializable;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.util.List;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteStatelessDDCPathology_12501321_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteStatelessDDCPathology_12501321 target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.ardais.bigr.pdc.beans.DDCPathology:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteStatelessDDCPathology_12501321) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 6: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case 11: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    } else if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    }
                case 12: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case 13: 
                    if (method.equals("getPathReport")) {
                        return getPathReport(in, reply);
                    }
                case 15: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    } else if (method.equals("buildPathReport")) {
                        return buildPathReport(in, reply);
                    }
                case 16: 
                    if (method.equals("createPathReport")) {
                        return createPathReport(in, reply);
                    } else if (method.equals("updatePathReport")) {
                        return updatePathReport(in, reply);
                    }
                case 19: 
                    if (method.equals("createRawPathReport")) {
                        return createRawPathReport(in, reply);
                    } else if (method.equals("updateRawPathReport")) {
                        return updateRawPathReport(in, reply);
                    }
                case 20: 
                    if (method.equals("getPathReportSection")) {
                        return getPathReportSection(in, reply);
                    } else if (method.equals("getPathReportSummary")) {
                        return getPathReportSummary(in, reply);
                    }
                case 21: 
                    if (method.equals("getPathReportSections")) {
                        return getPathReportSections(in, reply);
                    }
                case 23: 
                    if (method.equals("createPathReportSection")) {
                        return createPathReportSection(in, reply);
                    } else if (method.equals("getPathReportDiagnostic")) {
                        return getPathReportDiagnostic(in, reply);
                    } else if (method.equals("updatePathReportSection")) {
                        return updatePathReportSection(in, reply);
                    }
                case 24: 
                    if (method.equals("getPathReportDiagnostics")) {
                        return getPathReportDiagnostics(in, reply);
                    } else if (method.equals("getSectionIdentifierList")) {
                        return getSectionIdentifierList(in, reply);
                    }
                case 25: 
                    if (method.equals("isExistsPathReportSection")) {
                        return isExistsPathReportSection(in, reply);
                    }
                case 26: 
                    if (method.equals("createPathReportDiagnostic")) {
                        return createPathReportDiagnostic(in, reply);
                    } else if (method.equals("updatePathReportDiagnostic")) {
                        return updatePathReportDiagnostic(in, reply);
                    }
                case 27: 
                    if (method.equals("getPathReportSectionFinding")) {
                        return getPathReportSectionFinding(in, reply);
                    }
                case 28: 
                    if (method.equals("getPathReportSectionFindings")) {
                        return getPathReportSectionFindings(in, reply);
                    }
                case 30: 
                    if (method.equals("createPathReportSectionFinding")) {
                        return createPathReportSectionFinding(in, reply);
                    } else if (method.equals("updatePathReportSectionFinding")) {
                        return updatePathReportSectionFinding(in, reply);
                    }
                case 32: 
                    if (method.equals("isExistsPathReportSectionFinding")) {
                        return isExistsPathReportSectionFinding(in, reply);
                    }
                case 36: 
                    if (method.equals("getRawPathReport__CORBA_WStringValue")) {
                        return getRawPathReport__CORBA_WStringValue(in, reply);
                    }
                case 62: 
                    if (method.equals("getRawPathReport__com_ardais_bigr_pdc_javabeans_PathReportData")) {
                        return getRawPathReport__com_ardais_bigr_pdc_javabeans_PathReportData(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream buildPathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        PathReportData result = target.buildPathReport(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream createPathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportData result = target.createPathReport(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream createPathReportDiagnostic(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportDiagnosticData arg0 = (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportDiagnosticData result = target.createPathReportDiagnostic(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportDiagnosticData.class);
        return out;
    }
    
    private OutputStream createPathReportSection(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionData arg0 = (PathReportSectionData) in.read_value(PathReportSectionData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportSectionData result = target.createPathReportSection(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionData.class);
        return out;
    }
    
    private OutputStream createPathReportSectionFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionFindingData arg0 = (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportSectionFindingData result = target.createPathReportSectionFinding(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionFindingData.class);
        return out;
    }
    
    private OutputStream createRawPathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportData result = target.createRawPathReport(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream getPathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        PathReportData result = target.getPathReport(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream getPathReportDiagnostic(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportDiagnosticData arg0 = (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
        PathReportDiagnosticData result = target.getPathReportDiagnostic(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportDiagnosticData.class);
        return out;
    }
    
    private OutputStream getPathReportDiagnostics(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        List result = target.getPathReportDiagnostics(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream getPathReportSection(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionData arg0 = (PathReportSectionData) in.read_value(PathReportSectionData.class);
        PathReportSectionData result = target.getPathReportSection(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionData.class);
        return out;
    }
    
    private OutputStream getPathReportSectionFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionFindingData arg0 = (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
        PathReportSectionFindingData result = target.getPathReportSectionFinding(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionFindingData.class);
        return out;
    }
    
    private OutputStream getPathReportSectionFindings(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionData arg0 = (PathReportSectionData) in.read_value(PathReportSectionData.class);
        List result = target.getPathReportSectionFindings(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream getPathReportSections(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        List result = target.getPathReportSections(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream getPathReportSummary(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        PathReportData result = target.getPathReportSummary(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream getRawPathReport__com_ardais_bigr_pdc_javabeans_PathReportData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        PathReportData result = target.getRawPathReport(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream getSectionIdentifierList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String arg1 = (String) in.read_value(String.class);
        LegalValueSet result = target.getSectionIdentifierList(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,LegalValueSet.class);
        return out;
    }
    
    private OutputStream isExistsPathReportSection(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionData arg0 = (PathReportSectionData) in.read_value(PathReportSectionData.class);
        boolean result = target.isExistsPathReportSection(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream isExistsPathReportSectionFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionFindingData arg0 = (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
        boolean result = target.isExistsPathReportSectionFinding(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream updatePathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportData result = target.updatePathReport(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream updatePathReportDiagnostic(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportDiagnosticData arg0 = (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportDiagnosticData result = target.updatePathReportDiagnostic(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportDiagnosticData.class);
        return out;
    }
    
    private OutputStream updatePathReportSection(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionData arg0 = (PathReportSectionData) in.read_value(PathReportSectionData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportSectionData result = target.updatePathReportSection(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionData.class);
        return out;
    }
    
    private OutputStream updatePathReportSectionFinding(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportSectionFindingData arg0 = (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportSectionFindingData result = target.updatePathReportSectionFinding(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportSectionFindingData.class);
        return out;
    }
    
    private OutputStream updateRawPathReport(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        PathReportData arg0 = (PathReportData) in.read_value(PathReportData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        PathReportData result = target.updateRawPathReport(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
    
    private OutputStream getRawPathReport__CORBA_WStringValue(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        PathReportData result = target.getRawPathReport(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,PathReportData.class);
        return out;
    }
}
