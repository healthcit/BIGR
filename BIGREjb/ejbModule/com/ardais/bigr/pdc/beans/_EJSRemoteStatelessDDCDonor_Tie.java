// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.ardais.bigr.pdc.beans;

import com.ardais.bigr.pdc.javabeans.AttachmentData;
import com.ardais.bigr.pdc.javabeans.ClinicalDataData;
import com.ardais.bigr.pdc.javabeans.ConsentData;
import com.ardais.bigr.pdc.javabeans.DonorData;
import com.ardais.bigr.security.SecurityInfo;
import java.io.Serializable;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.Remote;
import java.util.List;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.Delegate;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;

public class _EJSRemoteStatelessDDCDonor_Tie extends org.omg.CORBA_2_3.portable.ObjectImpl implements Tie {
    
    private EJSRemoteStatelessDDCDonor target = null;
    private ORB orb = null;
    
    private static final String[] _type_ids = {
        "RMI:com.ardais.bigr.pdc.beans.DDCDonor:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000", 
        "RMI:com.ibm.websphere.csi.CSIServant:0000000000000000", 
        "RMI:com.ibm.websphere.csi.TransactionalObject:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (EJSRemoteStatelessDDCDonor) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        if (orb != null) {
            orb.disconnect(this);
            _set_delegate(null);
        }
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public void _set_delegate(Delegate del) {
        super._set_delegate(del);
        if (del != null)
            orb = _orb();
        else
            orb = null;
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 6: 
                    if (method.equals("remove")) {
                        return remove(in, reply);
                    }
                case 9: 
                    if (method.equals("isPresent")) {
                        return isPresent(in, reply);
                    }
                case 11: 
                    if (method.equals("_get_handle")) {
                        return _get_handle(in, reply);
                    } else if (method.equals("isIdentical")) {
                        return isIdentical(in, reply);
                    } else if (method.equals("getConsents")) {
                        return getConsents(in, reply);
                    }
                case 12: 
                    if (method.equals("_get_EJBHome")) {
                        return _get_EJBHome(in, reply);
                    }
                case 14: 
                    if (method.equals("buildDonorData")) {
                        return buildDonorData(in, reply);
                    } else if (method.equals("getAttachments")) {
                        return getAttachments(in, reply);
                    }
                case 15: 
                    if (method.equals("_get_primaryKey")) {
                        return _get_primaryKey(in, reply);
                    } else if (method.equals("getClinicalData")) {
                        return getClinicalData(in, reply);
                    } else if (method.equals("getDonorProfile")) {
                        return getDonorProfile(in, reply);
                    } else if (method.equals("getDonorAccount")) {
                        return getDonorAccount(in, reply);
                    }
                case 16: 
                    if (method.equals("deleteAttachment")) {
                        return deleteAttachment(in, reply);
                    } else if (method.equals("getConsentDetail")) {
                        return getConsentDetail(in, reply);
                    }
                case 18: 
                    if (method.equals("createClinicalData")) {
                        return createClinicalData(in, reply);
                    } else if (method.equals("createDonorProfile")) {
                        return createDonorProfile(in, reply);
                    } else if (method.equals("updateClinicalData")) {
                        return updateClinicalData(in, reply);
                    } else if (method.equals("updateDonorProfile")) {
                        return updateDonorProfile(in, reply);
                    }
                case 19: 
                    if (method.equals("getClinicalDataList")) {
                        return getClinicalDataList(in, reply);
                    } else if (method.equals("getDonorCaseSummary")) {
                        return getDonorCaseSummary(in, reply);
                    }
                case 21: 
                    if (method.equals("insertDonorAttachment")) {
                        return insertDonorAttachment(in, reply);
                    }
                case 22: 
                    if (method.equals("updateCaseProfileNotes")) {
                        return updateCaseProfileNotes(in, reply);
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    private OutputStream _get_EJBHome(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBHome result = target.getEJBHome();
        OutputStream out = reply.createReply();
        Util.writeRemoteObject(out,result);
        return out;
    }
    
    private OutputStream _get_primaryKey(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Object result = target.getPrimaryKey();
        OutputStream out = reply.createReply();
        Util.writeAny(out,result);
        return out;
    }
    
    private OutputStream remove(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        try {
            target.remove();
        } catch (RemoveException ex) {
            String id = "IDL:javax/ejb/RemoveEx:1.0";
            org.omg.CORBA_2_3.portable.OutputStream out = 
                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
            out.write_string(id);
            out.write_value(ex,RemoveException.class);
            return out;
        }
        OutputStream out = reply.createReply();
        return out;
    }
    
    private OutputStream _get_handle(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        Handle result = target.getHandle();
        OutputStream out = reply.createReply();
        Util.writeAbstractObject(out,result);
        return out;
    }
    
    private OutputStream isIdentical(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        EJBObject arg0 = (EJBObject) in.read_Object(EJBObject.class);
        boolean result = target.isIdentical(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream buildDonorData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        DonorData result = target.buildDonorData(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DonorData.class);
        return out;
    }
    
    private OutputStream createClinicalData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ClinicalDataData arg0 = (ClinicalDataData) in.read_value(ClinicalDataData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        ClinicalDataData result = target.createClinicalData(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ClinicalDataData.class);
        return out;
    }
    
    private OutputStream createDonorProfile(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        DonorData result = target.createDonorProfile(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DonorData.class);
        return out;
    }
    
    private OutputStream getAttachments(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        List result = target.getAttachments(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream deleteAttachment(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        boolean result = target.deleteAttachment(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream insertDonorAttachment(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        AttachmentData arg0 = (AttachmentData) in.read_value(AttachmentData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        AttachmentData result = target.insertDonorAttachment(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,AttachmentData.class);
        return out;
    }
    
    private OutputStream getClinicalData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ClinicalDataData arg0 = (ClinicalDataData) in.read_value(ClinicalDataData.class);
        ClinicalDataData result = target.getClinicalData(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ClinicalDataData.class);
        return out;
    }
    
    private OutputStream getClinicalDataList(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ClinicalDataData arg0 = (ClinicalDataData) in.read_value(ClinicalDataData.class);
        List result = target.getClinicalDataList(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream getConsentDetail(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ConsentData arg0 = (ConsentData) in.read_value(ConsentData.class);
        ConsentData result = target.getConsentDetail(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ConsentData.class);
        return out;
    }
    
    private OutputStream getConsents(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        List result = target.getConsents(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value((Serializable)result,List.class);
        return out;
    }
    
    private OutputStream getDonorCaseSummary(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        boolean arg1 = in.read_boolean();
        DonorData result = target.getDonorCaseSummary(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DonorData.class);
        return out;
    }
    
    private OutputStream getDonorProfile(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        DonorData result = target.getDonorProfile(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DonorData.class);
        return out;
    }
    
    private OutputStream getDonorAccount(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        String arg0 = (String) in.read_value(String.class);
        String result = target.getDonorAccount(arg0);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,String.class);
        return out;
    }
    
    private OutputStream isPresent(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        boolean result = target.isPresent(arg0);
        OutputStream out = reply.createReply();
        out.write_boolean(result);
        return out;
    }
    
    private OutputStream updateCaseProfileNotes(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ConsentData arg0 = (ConsentData) in.read_value(ConsentData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        ConsentData result = target.updateCaseProfileNotes(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ConsentData.class);
        return out;
    }
    
    private OutputStream updateClinicalData(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        ClinicalDataData arg0 = (ClinicalDataData) in.read_value(ClinicalDataData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        ClinicalDataData result = target.updateClinicalData(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,ClinicalDataData.class);
        return out;
    }
    
    private OutputStream updateDonorProfile(org.omg.CORBA_2_3.portable.InputStream in , ResponseHandler reply) throws Throwable {
        DonorData arg0 = (DonorData) in.read_value(DonorData.class);
        SecurityInfo arg1 = (SecurityInfo) in.read_value(SecurityInfo.class);
        DonorData result = target.updateDonorProfile(arg0, arg1);
        org.omg.CORBA_2_3.portable.OutputStream out = 
            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
        out.write_value(result,DonorData.class);
        return out;
    }
}
