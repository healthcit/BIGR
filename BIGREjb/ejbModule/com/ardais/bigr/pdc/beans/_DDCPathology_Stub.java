// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.ardais.bigr.pdc.beans;

import com.ardais.bigr.iltds.assistants.LegalValueSet;
import com.ardais.bigr.pdc.javabeans.PathReportData;
import com.ardais.bigr.pdc.javabeans.PathReportDiagnosticData;
import com.ardais.bigr.pdc.javabeans.PathReportSectionData;
import com.ardais.bigr.pdc.javabeans.PathReportSectionFindingData;
import com.ardais.bigr.security.SecurityInfo;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.List;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _DDCPathology_Stub extends Stub implements DDCPathology {
    
    private static final String[] _type_ids = {
        "RMI:com.ardais.bigr.pdc.beans.DDCPathology:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_EJBHome", true);
                        in = _invoke(out);
                        return (EJBHome) in.read_Object(EJBHome.class);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                    return (EJBHome)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_primaryKey", true);
                        in = _invoke(out);
                        return Util.readAny(in);
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                    return (Object)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("remove", true);
                        _invoke(out);
                        return;
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                            throw (RemoveException) in.read_value(RemoveException.class);
                        }
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    ((javax.ejb.EJBObject)so.servant).remove();
                    return;
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    if (exCopy instanceof RemoveException) {
                        throw (RemoveException)exCopy;
                    }
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("_get_handle", true);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (Handle) in.read_abstract_interface(Handle.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                    return (Handle)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                InputStream in = null;
                try {
                    try {
                        OutputStream out = _request("isIdentical", true);
                        Util.writeRemoteObject(out,arg0);
                        in = _invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
                if (so == null) {
                    continue;
                }
                try {
                    EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                    return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData buildPathReport(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("buildPathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("buildPathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).buildPathReport(arg0Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData createPathReport(PathReportData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createPathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createPathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportData arg0Copy = (PathReportData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).createPathReport(arg0Copy, arg1Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportDiagnosticData createPathReportDiagnostic(PathReportDiagnosticData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createPathReportDiagnostic", true);
                        out.write_value(arg0,PathReportDiagnosticData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createPathReportDiagnostic",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportDiagnosticData arg0Copy = (PathReportDiagnosticData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportDiagnosticData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).createPathReportDiagnostic(arg0Copy, arg1Copy);
                    return (PathReportDiagnosticData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionData createPathReportSection(PathReportSectionData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createPathReportSection", true);
                        out.write_value(arg0,PathReportSectionData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionData) in.read_value(PathReportSectionData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createPathReportSection",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportSectionData arg0Copy = (PathReportSectionData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportSectionData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).createPathReportSection(arg0Copy, arg1Copy);
                    return (PathReportSectionData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionFindingData createPathReportSectionFinding(PathReportSectionFindingData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createPathReportSectionFinding", true);
                        out.write_value(arg0,PathReportSectionFindingData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createPathReportSectionFinding",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportSectionFindingData arg0Copy = (PathReportSectionFindingData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportSectionFindingData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).createPathReportSectionFinding(arg0Copy, arg1Copy);
                    return (PathReportSectionFindingData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData createRawPathReport(PathReportData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("createRawPathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("createRawPathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportData arg0Copy = (PathReportData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).createRawPathReport(arg0Copy, arg1Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData getPathReport(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReport(arg0Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportDiagnosticData getPathReportDiagnostic(PathReportDiagnosticData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportDiagnostic", true);
                        out.write_value(arg0,PathReportDiagnosticData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportDiagnostic",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportDiagnosticData arg0Copy = (PathReportDiagnosticData) Util.copyObject(arg0,_orb());
                    PathReportDiagnosticData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportDiagnostic(arg0Copy);
                    return (PathReportDiagnosticData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public List getPathReportDiagnostics(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportDiagnostics", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (List) in.read_value(List.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportDiagnostics",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    List result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportDiagnostics(arg0Copy);
                    return (List)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionData getPathReportSection(PathReportSectionData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportSection", true);
                        out.write_value(arg0,PathReportSectionData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionData) in.read_value(PathReportSectionData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportSection",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportSectionData arg0Copy = (PathReportSectionData) Util.copyObject(arg0,_orb());
                    PathReportSectionData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportSection(arg0Copy);
                    return (PathReportSectionData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionFindingData getPathReportSectionFinding(PathReportSectionFindingData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportSectionFinding", true);
                        out.write_value(arg0,PathReportSectionFindingData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportSectionFinding",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportSectionFindingData arg0Copy = (PathReportSectionFindingData) Util.copyObject(arg0,_orb());
                    PathReportSectionFindingData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportSectionFinding(arg0Copy);
                    return (PathReportSectionFindingData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public List getPathReportSectionFindings(PathReportSectionData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportSectionFindings", true);
                        out.write_value(arg0,PathReportSectionData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (List) in.read_value(List.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportSectionFindings",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportSectionData arg0Copy = (PathReportSectionData) Util.copyObject(arg0,_orb());
                    List result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportSectionFindings(arg0Copy);
                    return (List)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public List getPathReportSections(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportSections", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (List) in.read_value(List.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportSections",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    List result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportSections(arg0Copy);
                    return (List)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData getPathReportSummary(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getPathReportSummary", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getPathReportSummary",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getPathReportSummary(arg0Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData getRawPathReport(PathReportData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getRawPathReport__com_ardais_bigr_pdc_javabeans_PathReportData", true);
                        out.write_value(arg0,PathReportData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getRawPathReport__com_ardais_bigr_pdc_javabeans_PathReportData",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData arg0Copy = (PathReportData) Util.copyObject(arg0,_orb());
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getRawPathReport(arg0Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public LegalValueSet getSectionIdentifierList(String arg0, String arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getSectionIdentifierList", true);
                        out.write_value(arg0,String.class);
                        out.write_value(arg1,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (LegalValueSet) in.read_value(LegalValueSet.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getSectionIdentifierList",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    LegalValueSet result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getSectionIdentifierList(arg0, arg1);
                    return (LegalValueSet)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public boolean isExistsPathReportSection(PathReportSectionData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("isExistsPathReportSection", true);
                        out.write_value(arg0,PathReportSectionData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("isExistsPathReportSection",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportSectionData arg0Copy = (PathReportSectionData) Util.copyObject(arg0,_orb());
                    return ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).isExistsPathReportSection(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public boolean isExistsPathReportSectionFinding(PathReportSectionFindingData arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("isExistsPathReportSectionFinding", true);
                        out.write_value(arg0,PathReportSectionFindingData.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return in.read_boolean();
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("isExistsPathReportSectionFinding",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportSectionFindingData arg0Copy = (PathReportSectionFindingData) Util.copyObject(arg0,_orb());
                    return ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).isExistsPathReportSectionFinding(arg0Copy);
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData updatePathReport(PathReportData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updatePathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updatePathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportData arg0Copy = (PathReportData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).updatePathReport(arg0Copy, arg1Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportDiagnosticData updatePathReportDiagnostic(PathReportDiagnosticData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updatePathReportDiagnostic", true);
                        out.write_value(arg0,PathReportDiagnosticData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportDiagnosticData) in.read_value(PathReportDiagnosticData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updatePathReportDiagnostic",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportDiagnosticData arg0Copy = (PathReportDiagnosticData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportDiagnosticData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).updatePathReportDiagnostic(arg0Copy, arg1Copy);
                    return (PathReportDiagnosticData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionData updatePathReportSection(PathReportSectionData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updatePathReportSection", true);
                        out.write_value(arg0,PathReportSectionData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionData) in.read_value(PathReportSectionData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updatePathReportSection",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportSectionData arg0Copy = (PathReportSectionData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportSectionData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).updatePathReportSection(arg0Copy, arg1Copy);
                    return (PathReportSectionData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportSectionFindingData updatePathReportSectionFinding(PathReportSectionFindingData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updatePathReportSectionFinding", true);
                        out.write_value(arg0,PathReportSectionFindingData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportSectionFindingData) in.read_value(PathReportSectionFindingData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updatePathReportSectionFinding",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportSectionFindingData arg0Copy = (PathReportSectionFindingData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportSectionFindingData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).updatePathReportSectionFinding(arg0Copy, arg1Copy);
                    return (PathReportSectionFindingData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData updateRawPathReport(PathReportData arg0, SecurityInfo arg1) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("updateRawPathReport", true);
                        out.write_value(arg0,PathReportData.class);
                        out.write_value(arg1,SecurityInfo.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("updateRawPathReport",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                    PathReportData arg0Copy = (PathReportData) copies[0];
                    SecurityInfo arg1Copy = (SecurityInfo) copies[1];
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).updateRawPathReport(arg0Copy, arg1Copy);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
    
    public PathReportData getRawPathReport(String arg0) throws RemoteException {
        while(true) {
            if (!Util.isLocal(this)) {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    try {
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream)
                            _request("getRawPathReport__CORBA_WStringValue", true);
                        out.write_value(arg0,String.class);
                        in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                        return (PathReportData) in.read_value(PathReportData.class);
                    } catch (ApplicationException ex) {
                        in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                        String id = in.read_string();
                        throw new UnexpectedException(id);
                    } catch (RemarshalException ex) {
                        continue;
                    }
                } catch (SystemException ex) {
                    throw Util.mapSystemException(ex);
                } finally {
                    _releaseReply(in);
                }
            } else {
                ServantObject so = _servant_preinvoke("getRawPathReport__CORBA_WStringValue",com.ardais.bigr.pdc.beans.DDCPathology.class);
                if (so == null) {
                    continue;
                }
                try {
                    PathReportData result = ((com.ardais.bigr.pdc.beans.DDCPathology)so.servant).getRawPathReport(arg0);
                    return (PathReportData)Util.copyObject(result,_orb());
                } catch (Throwable ex) {
                    Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                    throw Util.wrapException(exCopy);
                } finally {
                    _servant_postinvoke(so);
                }
            }
        }
    }
}
