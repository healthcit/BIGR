package com.ardais.bigr.util;

import java.beans.Introspector;
import java.util.StringTokenizer;

import com.ardais.bigr.api.ApiFunctions;

/**
 * Contains static utility methods related to converting system names.  A system name is an
 * identifier comprising one of more words that can be used when naming Java classes, methods and 
 * variables, database tables and columns, etc.  System names are associated with data elements 
 * and categories of Clinical Information Repository data.  A system name is 20 characters or less.
 * <p>
 * For the purposes of the methods in this class, it is assumed that all system name input 
 * parameters are in their canonical form, which is multiple words separated by an underscore (_)
 * with no assumptions made as to the case of the words.
 */
public class SystemNameUtils {

  private static final int SYSTEM_NAME_LENGTH = 20;
  
  /**
   * Since this class only has static methods we'd normally never need to instantiate it.
   * However, we want to use methods on this class inside Velocity templates and to do so
   * we must create an instance of the class and place it in the VelocityContext.  So, we
   * provide a constant containing a singleton instance.  When using this class from Java
   * code there's no reason to use this contant.
   */
  public static final SystemNameUtils SINGLETON = new SystemNameUtils();

  private SystemNameUtils() {
    super();
  }

  /**
   * Converts a system name to all words concatenated with no underscores, and with the first 
   * letter of each word uppercased and the rest of the letters lowercased.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased.
   */
  public static String convertToUpperFirst(String systemName) {
    StringBuffer buf = new StringBuffer(SYSTEM_NAME_LENGTH);
    StringTokenizer tokenizer = new StringTokenizer(systemName, "_");
    while (tokenizer.hasMoreTokens()) {
      String word = tokenizer.nextToken();
      String firstLetter = word.substring(0,1).toUpperCase();
      String rest = word.substring(1);
      buf.append(firstLetter);
      buf.append(rest);
    }
    return buf.toString();    
  }

  /**
   * Converts a system name to all words concatenated with no underscores, and with the first 
   * letter of the first word lowercase, the first letter of each subsequent word uppercased,
   * and the rest of the letters lowercased.  Obeys the JavaBeans introspection conventions of
   * not lowercasing the first letter if the second letter is also uppercase (See JavaBeans 1.01
   * specification, section 8.8), since the names generated by this method may be introspected
   * at run-time.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except for the first word.
   */
  public static String convertToUpperFirstExceptFirst(String systemName) {
    String name = convertToUpperFirst(systemName);
    return Introspector.decapitalize(name);
  }

  /**
   * Converts a system name to all words concatenated with no underscores, and all letters 
   * lowercased.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of all letters lowercased.
   */
  private static String convertToAllLower(String systemName) {
    return ApiFunctions.replace(systemName.toLowerCase(), "_", "");
  }

  /**
   * Converts a system name to its canonical form - all words lowercase and separated by 
   * underscores.
   * 
   * @param  systemName  the input system name.  All capital letters and underscores in the input 
   *                      system name are assumed to start a new word.
   * @return The system name converted to its canonical form.
   */
  public static String convertToCanonicalForm(String systemName) {
    StringBuffer buf = new StringBuffer(SYSTEM_NAME_LENGTH);
    int length = systemName.length();
    for (int i = 0; i < length; i++) {
      char c = systemName.charAt(i);
      if (Character.isUpperCase(c)) {
        // Note: if the first character is uppercase, then do not prefix with an underscore,
        // since system names will never start with an underscore.  This covers a relatively 
        // esoteric JavaBeans naming convention in that the first letter of a property is not
        // lowercased if the second letter is also uppercase (See JavaBeans 1.01 specification,
        // section 8.8) 
        if (i > 0) {
          buf.append('_');
        }
        buf.append(Character.toLowerCase(c));
      }
      else {
        buf.append(c);
      }
    }
    return buf.toString();
  }

  /**
   * Converts a system name to a name suitable for use as the method name of an accessor method,
   * without the verb (e.g. "get", "set", etc.).  
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased.
   */
  public static String convertToAccessorName(String systemName) {
    return convertToUpperFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use as the name of a Java class.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased.
   */
  public static String convertToClassName(String systemName) {
    return convertToUpperFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use as a class' member variable.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except the first word, prefixed with an underscore.
   */
  public static String convertToMemberVariableName(String systemName) {
    return "_" + convertToUpperFirstExceptFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use in the name of a Java package.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to all lowercase without underscores.
   */
  public static String convertToPackageName(String systemName) {
    return convertToAllLower(systemName);
  }

  /**
   * Converts a system name to a name suitable for use as a method name.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except the first word.
   */
  public static String convertToMethodName(String systemName) {
    return convertToUpperFirstExceptFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use as a method parameter name.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except the first word.
   */
  public static String convertToParameterName(String systemName) {
    return convertToUpperFirstExceptFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use in a path.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except the first word.
   */
  public static String convertToPathName(String systemName) {
    return convertToUpperFirstExceptFirst(systemName);
  }

  /**
   * Converts a system name to a name suitable for use as a property as found in a properties file.
   * 
   * @param  systemName  the input system name, in its canonical form
   * @return The system name converted to a format of the first letter of each word uppercased,
   *          except the first word.
   */
  public static String convertToPropertyName(String systemName) {
    return convertToUpperFirstExceptFirst(systemName);
  }

}
